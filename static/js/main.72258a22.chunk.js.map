{"version":3,"sources":["theme/GlobalStyles.js","utils/storage.js","theme/useTheme.js","ThemeSelector.js","Dialog.js","CreateThemeContent.js","App.js","index.js"],"names":["GlobalStyles","createGlobalStyle","theme","colors","body","text","font","link","button","background","setToLS","key","value","window","localStorage","setItem","JSON","stringify","getFromLS","getItem","parse","useTheme","themes","useState","data","light","setTheme","themeLoaded","setThemeLoaded","useEffect","localTheme","setMode","mode","getFonts","_","values","mapValues","ThemedButton","styled","Wrapper","li","Container","ul","Header","h2","props","themesFromStore","setData","setThemes","themeSwitcher","selectedTheme","console","log","setter","keys","newTheme","updateThemeCard","updated","ThemeCard","style","backgroundColor","camelCase","name","color","fontFamily","onClick","length","map","id","Modal","dialog","animatetop","keyframes","ModalContent","div","ModalHeader","Close","span","ModalBody","Dialog","show","setShow","open","callback","header","Section","Row","Preview","CreateThemeContent","defaultTheme","themeName","bgColor","txtColor","btnBgColor","btnTxtColor","linkColor","state","setState","setNewTheme","themeObj","generate","getThemeObj","handleChange","evt","target","float","create","disabled","trim","htmlFor","type","placeholder","onChange","index","className","href","App","setSelectedTheme","showDialog","setShowDialog","WebFont","load","google","families","manageDialog","ThemeSelector","Index","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.72258a22.chunk.js","sourcesContent":["\r\nimport { createGlobalStyle} from \"styled-components\";\r\n\r\nexport const GlobalStyles = createGlobalStyle`\r\n  body {\r\n    background: ${({ theme }) => theme.colors.body};\r\n    color: ${({ theme }) => theme.colors.text};\r\n    font-family: ${({ theme }) => theme.font};\r\n    transition: all 0.50s linear;\r\n  }\r\n  a {\r\n    color: ${({ theme }) => theme.colors.link.text};\r\n    cursor: pointer;\r\n  }\r\n  button.btn {\r\n    background-color: ${({ theme }) => theme.colors.button.background};\r\n    color: ${({ theme }) => theme.colors.button.text};\r\n  }\r\n  button.cancel {\r\n    background-color: #ff0000;\r\n    color: ${({ theme }) => theme.colors.button.text};\r\n  }\r\n  button:disabled {\r\n    background-color: #ebebeb;\r\n    color: #333333;\r\n  }\r\n  button {\r\n    border: 0;\r\n    display: inline-block;\r\n    padding: 12px 24px;\r\n    font-size: 14px;\r\n    border-radius: 4px;\r\n    margin-top: 5px;\r\n    cursor: pointer;\r\n    background-color: #1064EA;\r\n    color: #FFFFFF;\r\n    font-family: ${({ theme }) => theme.font};\r\n  }\r\n  h1 {\r\n    text-align: center;\r\n  }\r\n`;","export const setToLS = (key, value) => {\r\n    window.localStorage.setItem(key, JSON.stringify(value));\r\n  }\r\n  \r\n  export const getFromLS = key => {\r\n    const value = window.localStorage.getItem(key);\r\n  \r\n    if (value) {\r\n      return JSON.parse(value);\r\n    }\r\n  }","import { useEffect, useState } from 'react';\r\nimport { setToLS, getFromLS } from '../utils/storage';\r\nimport _ from 'lodash';\r\n\r\nexport const useTheme = () => {\r\n    const themes = getFromLS('all-themes');\r\n    const [theme, setTheme] = useState(themes.data.light);\r\n    const [themeLoaded, setThemeLoaded] = useState(false);\r\n\r\n    const setMode = mode => {\r\n        setToLS('theme', mode)\r\n        setTheme(mode);\r\n    };\r\n\r\n    const getFonts = () => {\r\n        const allFonts = _.values(_.mapValues(themes.data, 'font'));\r\n        return allFonts;\r\n    }\r\n\r\n    useEffect(() => {\r\n        const localTheme = getFromLS('theme');\r\n        localTheme ? setTheme(localTheme) : setTheme(themes.data.light);\r\n        setThemeLoaded(true);\r\n    }, []);\r\n    \r\n    return { theme, themeLoaded, setMode, getFonts };\r\n};","import React, { useState, useEffect } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport _ from 'lodash';\r\nimport {useTheme} from './theme/useTheme';\r\nimport { getFromLS } from './utils/storage';\r\n\r\nconst ThemedButton = styled.button`\r\n    border: 0;\r\n    display: inline-block;\r\n    padding: 12px 24px;\r\n    font-size: 14px;\r\n    border-radius: 4px;\r\n    margin-top: 5px;\r\n    width: 100%;\r\n    cursor: pointer;\r\n`;\r\n\r\nconst Wrapper = styled.li`\r\n    padding: 48px;\r\n    text-align: center;\r\n    border-radius: 4px;\r\n    border: 1px solid #000;\r\n    list-style: none;\r\n`;\r\n\r\nconst Container = styled.ul`\r\n    display: grid;\r\n    gap: 1rem;\r\n    grid-template-columns: repeat(4, 1fr);\r\n    margin-top: 3rem;\r\n    padding: 10px;\r\n`;\r\n\r\nconst Header = styled.h2`\r\n    display: flex;\r\n    justify-content: space-around;\r\n`;\r\n\r\nexport default (props) => {\r\n    const themesFromStore = getFromLS('all-themes');\r\n    const [data, setData] = useState(themesFromStore.data);\r\n    const [themes, setThemes] = useState([]);\r\n    const {setMode} = useTheme();\r\n\r\n    const themeSwitcher = selectedTheme => {\r\n        console.log(selectedTheme);\r\n        setMode(selectedTheme);\r\n        props.setter(selectedTheme);\r\n    };\r\n\r\n    useEffect(() => {\r\n        setThemes(_.keys(data));\r\n    }, [data]);\r\n\r\n    useEffect(() => {\r\n        props.newTheme &&\r\n            updateThemeCard(props.newTheme);\r\n    }, [props.newTheme])\r\n\r\n    const updateThemeCard = theme => {\r\n        const key = _.keys(theme)[0];\r\n        const updated = {...data, [key]:theme[key]};\r\n        setData(updated);\r\n    }\r\n\r\n    const ThemeCard = props => {\r\n        return(\r\n            <Wrapper style={{backgroundColor: `${data[_.camelCase(props.theme.name)].colors.body}`, \r\n                    color: `${data[_.camelCase(props.theme.name)].colors.text}`, \r\n                    fontFamily: `${data[_.camelCase(props.theme.name)].font}`}}>\r\n                    <span>Click on the button to set this theme</span>\r\n                <ThemedButton onClick={ (theme) => themeSwitcher(props.theme) }\r\n                    style={{backgroundColor: `${data[_.camelCase(props.theme.name)].colors.button.background}`, \r\n                    color: `${data[_.camelCase(props.theme.name)].colors.button.text}`,\r\n                    fontFamily: `${data[_.camelCase(props.theme.name)].font}`}}>\r\n                    {props.theme.name}\r\n                </ThemedButton>\r\n            </Wrapper>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Header>Select a Theme from below</Header>\r\n            <Container>\r\n            {\r\n                themes.length > 0 && \r\n                    themes.map(theme =>(\r\n                        <ThemeCard theme={data[theme]} key={data[theme].id} />\r\n                    ))\r\n            }\r\n            </Container>\r\n        </div>\r\n    )\r\n}","import React, { useState, useEffect } from 'react';\r\nimport styled, { keyframes } from \"styled-components\";\r\n\r\n\r\nconst Modal = styled.dialog`\r\n    position: fixed; /* Stay in place */\r\n    z-index: 1; /* Sit on top */\r\n    padding-top: 100px; /* Location of the box */\r\n    left: 0;\r\n    top: 0;\r\n    width: 100%; /* Full width */\r\n    height: 100%; /* Full height */\r\n    overflow: auto; /* Enable scroll if needed */\r\n    background: repeating-linear-gradient(\r\n        30deg,\r\n        rgba(24, 194, 236, 0.2),\r\n        rgba(24, 194, 236, 0.2) 1px,\r\n        rgba(24, 194, 236, 0.3) 1px,\r\n        rgba(24, 194, 236, 0.3) 20px\r\n    );\r\n    backdrop-filter: blur(1px);\r\n`;\r\n\r\nconst animatetop = keyframes`\r\n    from {\r\n        top:-300px; \r\n        opacity:0\r\n    } \r\n    to {\r\n        top:0; \r\n        opacity:1\r\n    }\r\n`;\r\n\r\nconst ModalContent = styled.div`\r\n position: relative;\r\n  background-color: #fefefe;\r\n  margin: auto;\r\n  padding: 0;\r\n  border: 1px solid #888;\r\n  width: 80%;\r\n  box-shadow: 0 4px 8px 0 rgba(0,0,0,0.2),0 6px 20px 0 rgba(0,0,0,0.19);\r\n  animation-name: ${animatetop};\r\n  animation-duration: 0.4s;\r\n`;\r\n\r\nconst ModalHeader = styled.div`\r\n    padding: 2px 16px;\r\n    background-color: ${({ theme }) => theme.colors.body};\r\n    color: ${({ theme }) => theme.colors.text};\r\n`;\r\n\r\nconst Close = styled.span`\r\n    color: ${({ theme }) => theme.colors.text};\r\n    float: right;\r\n    font-size: 28px;\r\n    font-weight: bold;\r\n    cursor: pointer;\r\n`;\r\n\r\nconst ModalBody = styled.div`\r\n    padding: 2px 16px;\r\n`;\r\n\r\nconst Dialog = props => {\r\n    const [show, setShow] = useState(false);\r\n\r\n    useEffect(() => {\r\n        setShow(props.open);\r\n    }, [props.open]);\r\n\r\n    const closeDialog = () => {\r\n        setShow(false);\r\n        props.callback()\r\n    }\r\n\r\n    return(\r\n        <Modal open={show}>\r\n            <ModalContent>\r\n                <ModalHeader>\r\n                    <Close onClick={ closeDialog }>&times;</Close>\r\n                    <h2>{ props.header }</h2>\r\n                </ModalHeader>\r\n                <ModalBody>\r\n                    { props.body }\r\n                </ModalBody>\r\n            </ModalContent>\r\n        </Modal>\r\n    )\r\n}\r\n\r\nexport default Dialog;","import React, { useState, useEffect } from 'react';\r\nimport styled from \"styled-components\";\r\nimport { generate } from 'shortid';\r\nimport _ from 'lodash';\r\nimport { useTheme } from './theme/useTheme';\r\n\r\nconst Container = styled.div`\r\n    display: grid;\r\n    gap: 1rem;\r\n    grid-template-columns: repeat(2, 1fr);\r\n    margin-top: 3rem;\r\n`;\r\n\r\nconst Section = styled.div`\r\n    vertical-align: top;\r\n    margin-right: 10px;\r\n    padding: 10px;\r\n`;\r\n\r\nconst Row = styled.div`\r\n    padding: 5px;\r\n`;\r\n\r\nconst Preview = styled.div`\r\n    border: 1px solid #000000;\r\n    border-radius: 4px;\r\n    width: 100%;\r\n    height: 200px;\r\n    padding: 5px;\r\n`;\r\n\r\nconst CreateThemeContent = props => {\r\n\r\n    const defaultTheme = {\r\n        themeName: \"\",\r\n        bgColor: \"#Cf4307\",\r\n        txtColor: \"#FFFFFF\",\r\n        btnBgColor: \"#000000\",\r\n        btnTxtColor: \"#FFFFFF\",\r\n        linkColor: \"#10BEEA\",\r\n        font: \"Roboto\"\r\n\r\n    };\r\n    const { getFonts } = useTheme();\r\n    const [state, setState] = useState(defaultTheme);\r\n    \r\n    const [newTheme, setNewTheme] = useState({});\r\n\r\n    const getThemeObj = () => {\r\n        const themeObj = {};\r\n        themeObj[_.camelCase(state.themeName)] = {\r\n            \"id\": generate(),\r\n            \"name\": state.themeName,\r\n            \"colors\": {\r\n                \"body\": state.bgColor,\r\n                \"text\": state.txtColor,\r\n                \"button\": {\r\n                    \"text\": state.btnBgColor,\r\n                    \"background\": state.btnTxtColor\r\n                },\r\n                \"link\": {\r\n                    \"text\": state.linkColor,\r\n                    \"opacity\": 1\r\n                }\r\n            },\r\n            \"font\": state.font\r\n        };\r\n        return themeObj;\r\n    }\r\n\r\n    useEffect(() => {\r\n        const updated = getThemeObj();\r\n        setNewTheme({...updated});\r\n    }, [state]);\r\n\r\n    const handleChange = evt => {\r\n        const value = evt.target.value;\r\n        setState({\r\n            ...state,\r\n            [evt.target.name]: value\r\n        });\r\n    }\r\n\r\n    const createTheme = () => {\r\n        setState({...defaultTheme});\r\n        props.create(newTheme);\r\n    }\r\n    \r\n\r\n    return(\r\n    <>\r\n        <button \r\n            style={{float:'right'}} \r\n            onClick={ createTheme }\r\n            disabled={ state.themeName.trim().length === 0 }>\r\n            Happy? Let's Create\r\n        </button>\r\n        <Container>\r\n            <Section>\r\n                <Row>\r\n                    <label htmlFor=\"th_name\">Theme Name:</label> {' '}\r\n                    <input \r\n                        type=\"text\" \r\n                        id=\"themeName\" \r\n                        name=\"themeName\" \r\n                        value={ state.themeName }\r\n                        placeholder=\"Specify a name\" \r\n                        onChange={ handleChange }/>\r\n                </Row>\r\n                <Row>\r\n                    <label htmlFor=\"bg_color\">Background Color:</label> {' '}\r\n                    <input type=\"color\" id=\"bg_color\" name=\"bgColor\" value= { state.bgColor } onChange={ handleChange }/>\r\n                </Row>\r\n                <Row>\r\n                    <label htmlFor=\"txt_color\">Text Color:</label> {' '}\r\n                    <input type=\"color\" id=\"txt_color\" name=\"txtColor\" value={ state.txtColor } onChange={ handleChange }/>\r\n                </Row>\r\n                <Row>\r\n                    <label htmlFor=\"btn_bg_color\">Button Background Color:</label> {' '}\r\n                    <input type=\"color\" id=\"btn_bg_color\" name=\"btnBgColor\" value={ state.btnBgColor } onChange={ handleChange }/>\r\n                </Row>\r\n                <Row>\r\n                    <label htmlFor=\"btn_txt_color\">Button Text Color:</label> {' '}\r\n                    <input type=\"color\" id=\"btn_txt_color\" name=\"btnTxtColor\" value={ state.btnTxtColor } onChange={ handleChange }/>\r\n                </Row>\r\n                <Row>\r\n                    <label htmlFor=\"link_color\">Link Color:</label> {' '}\r\n                    <input type=\"color\" id=\"link_color\" name=\"linkColor\" value={ state.linkColor } onChange={ handleChange }/>\r\n                </Row>\r\n                <Row>\r\n                    <label htmlFor=\"font\">Select a Font:</label> {' '}\r\n                    <select name=\"font\" id=\"font\" onChange={ handleChange } value={state.font}>\r\n                        {getFonts().map((font, index) =>\r\n                            <option value={ font } key={ index }>{ font }</option>\r\n                        )}\r\n                    </select>\r\n                </Row>\r\n            </Section>\r\n\r\n            <Section>\r\n                <span><b>Preview</b></span>\r\n                <Preview style={{backgroundColor: state.bgColor, color: state.txtColor, fontFamily: state.font}}>\r\n                    <p>\r\n                        This is for preview only. Pick the color and font from the \r\n                        left side to see it working.\r\n                    </p>\r\n                    <button className=\"btn\" style={{backgroundColor:state.btnBgColor, color:state.btnTxtColor, fontFamily: state.font}}>\r\n                        I am a Button\r\n                    </button> {'  '}\r\n                    <a href=\"#\" style={{color:state.linkColor, fontFamily: state.font}}>I am Link</a>\r\n                </Preview>\r\n            </Section>\r\n        </Container>\r\n    </>\r\n    )\r\n};\r\n\r\nexport default CreateThemeContent;","import React, { useState, useEffect } from 'react';\nimport styled, { ThemeProvider } from \"styled-components\";\nimport WebFont from 'webfontloader';\nimport { GlobalStyles } from './theme/GlobalStyles';\nimport {useTheme} from './theme/useTheme';\n\nimport ThemeSelector from './ThemeSelector';\n\nimport Dialog from './Dialog';\nimport CreateThemeContent from './CreateThemeContent';\n\nconst Container = styled.div`\n  margin: 5px auto 5px auto;\n`;\n\n\nfunction App() {\n  const {theme, themeLoaded, getFonts} = useTheme();\n  const [selectedTheme, setSelectedTheme] = useState(theme);\n  const [showDialog, setShowDialog] = useState(false);\n  const [newTheme, setNewTheme] = useState();\n  \n useEffect(() => {\n    WebFont.load({\n      google: {\n        families: getFonts()\n      }\n    });\n  });\n\n  useEffect(() => {\n    setSelectedTheme(theme);\n  }, [themeLoaded]);\n\n  const manageDialog = () => {\n    setShowDialog(!showDialog);\n  }\n\n  const createTheme = newTheme => {\n    console.log(newTheme);\n    setShowDialog(false);\n    setNewTheme(newTheme);\n  }\n\n  return (\n    <>\n    {\n      themeLoaded && <ThemeProvider theme={ selectedTheme }>\n        <GlobalStyles/>\n        <Container style={{fontFamily: selectedTheme.font}}>\n          <h1 className='h1'>Theming System</h1>\n          <p>\nThis is a theme selector.  It's purpose is to optimize user experience when previewing the front end of web applications.  Credit to <a>https://github.com/atapas/theme-builder</a>\n          </p>\n          <button className=\"btn\" onClick={ manageDialog }>Create a Theme</button>\n          <Dialog \n            header=\"Create a Theme\"\n            body={ <CreateThemeContent create={ createTheme }/> }\n            open={ showDialog } \n            callback = { manageDialog }/>\n          <ThemeSelector setter={ setSelectedTheme } newTheme={ newTheme }/>\n        </Container>\n      </ThemeProvider>\n    }\n    </>\n  );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nimport * as themes from './theme/schema.json';\nimport { setToLS } from './utils/storage';\n\nconst Index = () => {\n  setToLS('all-themes', themes.default);\n  return(\n    <App />\n  )\n}\n\nReactDOM.render(\n  <Index />,\n  document.getElementById('root')\n);"],"sourceRoot":""}